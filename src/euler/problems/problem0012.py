"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
from itertools import count

from euler.utils.factorization import factors, number_of_factors


def triangle(n: int) -> int:
    return (n**2 + n) // 2


def number_of_factors_of_triangle_number(n: int) -> int:
    if n % 2 == 0:
        return number_of_factors(n // 2) * number_of_factors(n + 1)
    else:
        return number_of_factors(n) * number_of_factors((n + 1) / 2)


def solution1() -> int:
    for i in count(1):
        if len(factors(triangle(i))) > 500:
            return triangle(i)


def solution2() -> int:
    for i in count(1):
        if number_of_factors(triangle(i)) > 500:
            return triangle(i)


def solution3() -> int:
    for i in count(1):
        if number_of_factors_of_triangle_number(i) > 500:
            return triangle(i)


if __name__ == "__main__":
    print(solution3())
