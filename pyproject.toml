[project]
name = "euler"
version = "0.0.1"
authors = [
  { name="Pete Dibdin" },
]
description = "Solutions for Project Euler"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.urls]
"Homepage" = "https://github.com/pjd199/euler"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

dependencies = [
    "numpy==1.26.1",
]

[project.optional-dependencies]
dev = [
    "EulerPy==1.4.0",
    "pre-commit=3.5.0",
]

[tool.ruff]
select = [
    "E",   # pycodestyle error
    "F",   # pyflakes
    "B",   # bugbear
    "W",   # pycodestyle warning
    "C90", # mccabe complexity
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quote
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
    #"PL", # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy-specific-rules
    "PERF", # perflint
    "RUF",  # ruff-specific-rules

]
ignore = [
    "B905",   # `zip()` without an explicit `strict=` parameter
    "ANN101", # Missing type annotation for `self` in method
]
fixable = ["ALL"]
src = ["src"]

[tool.ruff.pydocstyle]
convention = "google"